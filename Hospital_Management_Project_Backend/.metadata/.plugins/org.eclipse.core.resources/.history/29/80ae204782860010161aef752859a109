package com.knr.hospital.filter;

import java.util.List;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import com.knr.hospital.utils.JwtUtil;

import reactor.core.publisher.Mono;
import lombok.extern.slf4j.Slf4j; // Added for better logging

@Component
@Slf4j // Added for structured logging
public class JwtAuthenticationFilter extends AbstractGatewayFilterFactory<JwtAuthenticationFilter.Config> {

    private final JwtUtil jwtUtil;

    public JwtAuthenticationFilter(JwtUtil jwtUtil) {
        super(Config.class);
        this.jwtUtil = jwtUtil;
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            try {
                ServerHttpRequest request = exchange.getRequest();
                
                // Skip authentication for auth endpoints
                if (request.getURI().getPath().contains("/api/auth/")) {
                    log.debug("Skipping auth for path: {}", request.getURI().getPath());
                    return chain.filter(exchange)
                        .doOnSuccess(v -> log.debug("Response success for path: {}", exchange.getRequest().getURI().getPath()))
                        .doOnError(e -> log.error("Response error for skipped auth path: {}", e.getMessage()));
                }
                
                log.debug("Processing request for path: {}", request.getURI().getPath());
                
                // Check if Authorization header exists
                if (!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
                    log.warn("No Authorization header found for path: {}", request.getURI().getPath());
                    return onError(exchange, "No Authorization header", HttpStatus.UNAUTHORIZED);
                }

                String authHeader = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
                if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                    log.warn("Invalid Authorization format: {} for path: {}", authHeader, request.getURI().getPath());
                    return onError(exchange, "Invalid Authorization header format", HttpStatus.UNAUTHORIZED);
                }

                String token = authHeader.substring(7);
                log.debug("Extracted token prefix: {} for path: {}", token.substring(0, Math.min(token.length(), 20)), request.getURI().getPath());
                
                // Validate JWT token
                if (!jwtUtil.validateToken(token)) {
                    log.warn("Invalid or expired token for path: {}", request.getURI().getPath());
                    return onError(exchange, "Invalid or expired JWT token", HttpStatus.UNAUTHORIZED);
                }
                
                // Extract and log the role
                String userRole = jwtUtil.extractRole(token);
                log.debug("User role extracted from token: {} for path: {}", userRole, request.getURI().getPath());
                
                // Check role-based access if required
                if (config.isRequiresRole()) {
                    if (userRole == null) {
                        log.warn("No role found in token for path: {}", request.getURI().getPath());
                        return onError(exchange, "No role found in token", HttpStatus.FORBIDDEN);
                    }
                    
                    // For role-specific routes
                    if (!isAuthorized(userRole, config.getRequiredRoles())) {
                        log.warn("User role {} not authorized for required roles: {} on path: {}", userRole, config.getRequiredRoles(), request.getURI().getPath());
                        return onError(exchange, "Insufficient permissions", HttpStatus.FORBIDDEN);
                    }
                    log.info("Authorization successful for role: {} on path: {}", userRole, request.getURI().getPath());
                }
                
                // Add user info to headers for downstream services
                ServerHttpRequest modifiedRequest = request.mutate()
                        .header("X-Auth-User-Email", jwtUtil.extractUsername(token))
                        .header("X-Auth-User-Role", userRole)
                        .build();
                
                return chain.filter(exchange.mutate().request(modifiedRequest).build())
                    .doOnSuccess(v -> log.debug("Response success for path: {}", exchange.getRequest().getURI().getPath()))
                    .doOnError(e -> log.error("Response error: {}", e.getMessage())); // Added here for authenticated paths
            } catch (Exception e) {
                log.error("Exception in JWT filter for path {}: {}", exchange.getRequest().getURI().getPath(), e.getMessage(), e);
                return onError(exchange, "Internal error during authentication: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
            }
        };
    }

    private boolean isAuthorized(String userRole, List<String> requiredRoles) {
        // Admin can access everything
        if (userRole.equals("ADMIN")) {
            return true;
        }
        
        // Check if user role is in the required roles list
        return requiredRoles != null && requiredRoles.contains(userRole);
    }

    private Mono<Void> onError(ServerWebExchange exchange, String message, HttpStatus status) {
        ServerHttpResponse response = exchange.getResponse();
        log.error("Error response: {} - Status: {} for path: {}", message, status, exchange.getRequest().getURI().getPath());
        response.setStatusCode(status);
        return response.setComplete();
    }

    public static class Config {
        private boolean requiresRole = false;
        private List<String> requiredRoles;
 
        public boolean isRequiresRole() {
            return requiresRole;
        }
 
        public void setRequiresRole(boolean requiresRole) {
            this.requiresRole = requiresRole;
        }
 
        public List<String> getRequiredRoles() {
            return requiredRoles;
        }
 
        public void setRequiredRoles(List<String> requiredRoles) {
            this.requiredRoles = requiredRoles;
            this.requiresRole = true;
        }
    }
}
