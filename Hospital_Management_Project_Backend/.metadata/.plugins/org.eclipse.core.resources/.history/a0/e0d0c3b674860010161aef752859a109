package com.knr.hospital.config;

import org.springframework.boot.web.reactive.error.ErrorAttributes;
import org.springframework.cloud.gateway.support.NotFoundException;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.reactive.function.server.ServerResponse;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.Map;

import org.springframework.web.reactive.function.server.ServerRequest;

@Configuration
public class GlobalErrorHandler {

    @Bean
    public ErrorAttributes errorAttributes() {
        return new CustomErrorAttributes();
    }

    static class CustomErrorAttributes implements ErrorAttributes {

        public Map<String, Object> getErrorAttributes(ServerWebExchange request, boolean includeStackTrace) {
            Throwable error = getError(request);
            Map<String, Object> errorAttributes = new HashMap<>();
            errorAttributes.put("message", error.getMessage());
            errorAttributes.put("path", request.getRequest().getPath().value());
            if (includeStackTrace) {
                errorAttributes.put("stackTrace", java.util.Arrays.toString(error.getStackTrace()));
            }
            return errorAttributes;
        }

        public Throwable getError(ServerWebExchange request) {
            return (Throwable) request.getAttribute("org.springframework.boot.web.reactive.error.ErrorAttributes.ERROR");
        }

        @Override
        public Throwable getError(ServerRequest request) {
            // Properly implement by delegating to ServerWebExchange if available
            ServerWebExchange exchange = request.exchange();
            if (exchange != null) {
                return getError(exchange);
            }
            return null; // Fallback if no exchange available
        }

        @Override
        public void storeErrorInformation(Throwable error, ServerWebExchange exchange) {
            // Store the error in attributes for later retrieval
            exchange.getAttributes().put("org.springframework.boot.web.reactive.error.ErrorAttributes.ERROR", error);
        }
    }
}

@RestControllerAdvice
class GatewayExceptionHandler {

    @ExceptionHandler(NotFoundException.class)
    public Mono<ServerResponse> handleNotFound(NotFoundException ex, ServerWebExchange exchange) {
        return ServerResponse.status(HttpStatus.SERVICE_UNAVAILABLE)
            .bodyValue("Service unavailable: " + ex.getMessage());
    }

    @ExceptionHandler(Exception.class)
    public Mono<ServerResponse> handleGeneralException(Exception ex, ServerWebExchange exchange) {
        System.err.println("Unhandled error: " + ex.getMessage()); // Log to console
        return ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR)
            .bodyValue("Internal error: " + ex.getMessage());
    }
}
